// (Mostly) Autogenerated from mkBlueprint
import * as lucid from "@lucid-evolution/lucid";

type Data = lucid.Data;
type Validator = lucid.Validator;

export type Address = XAddress["_"];
export type Certificate = XCertificate["_"];
export type Credential = XCredential["_"];
export type Datum = XDatum["_"];
export type OutputReference = XOutputReference["_"];

export interface XAddress {
  new (): Validator;
  _: {
    paymentCredential:
      | { VerificationKeyCredential: [string] }
      | {
          ScriptCredential: [string];
        };
    stakeCredential:
      | {
          Inline: [
            | { VerificationKeyCredential: [string] }
            | {
                ScriptCredential: [string];
              },
          ];
        }
      | {
          Pointer: {
            slotNumber: bigint;
            transactionIndex: bigint;
            certificateIndex: bigint;
          };
        }
      | null;
  };
}

export const XAddress = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Address",
      description:
        "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
      anyOf: [
        {
          title: "Address",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "paymentCredential",
              description:
                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
              anyOf: [
                {
                  title: "VerificationKeyCredential",
                  dataType: "constructor",
                  index: 0,
                  fields: [{ dataType: "bytes" }],
                },
                {
                  title: "ScriptCredential",
                  dataType: "constructor",
                  index: 1,
                  fields: [{ dataType: "bytes" }],
                },
              ],
            },
            {
              title: "stakeCredential",
              anyOf: [
                {
                  title: "Some",
                  description: "An optional value.",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      description:
                        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                      anyOf: [
                        {
                          title: "Inline",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              description:
                                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                              anyOf: [
                                {
                                  title: "VerificationKeyCredential",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [{ dataType: "bytes" }],
                                },
                                {
                                  title: "ScriptCredential",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "bytes" }],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "Pointer",
                          dataType: "constructor",
                          index: 1,
                          fields: [
                            { dataType: "integer", title: "slotNumber" },
                            {
                              dataType: "integer",
                              title: "transactionIndex",
                            },
                            { dataType: "integer", title: "certificateIndex" },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "None",
                  description: "Nothing.",
                  dataType: "constructor",
                  index: 1,
                  fields: [],
                },
              ],
            },
          ],
        },
      ],
    },
  },
) as unknown as XAddress;

export interface XAssetName {
  new (): Validator;
  _: string;
}

export const XAssetName = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { dataType: "bytes" } },
) as unknown as XAssetName;

export interface XCertificate {
  new (): Validator;
  _:
    | {
        CredentialRegistration: {
          delegator:
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              };
        };
      }
    | {
        CredentialDeregistration: {
          delegator:
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              };
        };
      }
    | {
        CredentialDelegation: {
          delegator:
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              };
          delegatee: string;
        };
      }
    | { PoolRegistration: { poolId: string; vrf: string } }
    | { PoolDeregistration: { poolId: string; epoch: bigint } }
    | "Governance"
    | "TreasuryMovement";
}

export const XCertificate = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Certificate",
      description:
        "An on-chain certificate attesting of some operation. Publishing\n certificates / triggers different kind of rules; most of the time,\n they require signatures from / specific keys.",
      anyOf: [
        {
          title: "CredentialRegistration",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "delegator",
              description:
                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
              anyOf: [
                {
                  title: "Inline",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      description:
                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                      anyOf: [
                        {
                          title: "VerificationKeyCredential",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes" }],
                        },
                        {
                          title: "ScriptCredential",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "bytes" }],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "Pointer",
                  dataType: "constructor",
                  index: 1,
                  fields: [
                    { dataType: "integer", title: "slotNumber" },
                    {
                      dataType: "integer",
                      title: "transactionIndex",
                    },
                    { dataType: "integer", title: "certificateIndex" },
                  ],
                },
              ],
            },
          ],
        },
        {
          title: "CredentialDeregistration",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              title: "delegator",
              description:
                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
              anyOf: [
                {
                  title: "Inline",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      description:
                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                      anyOf: [
                        {
                          title: "VerificationKeyCredential",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes" }],
                        },
                        {
                          title: "ScriptCredential",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "bytes" }],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "Pointer",
                  dataType: "constructor",
                  index: 1,
                  fields: [
                    { dataType: "integer", title: "slotNumber" },
                    {
                      dataType: "integer",
                      title: "transactionIndex",
                    },
                    { dataType: "integer", title: "certificateIndex" },
                  ],
                },
              ],
            },
          ],
        },
        {
          title: "CredentialDelegation",
          dataType: "constructor",
          index: 2,
          fields: [
            {
              title: "delegator",
              description:
                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
              anyOf: [
                {
                  title: "Inline",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      description:
                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                      anyOf: [
                        {
                          title: "VerificationKeyCredential",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes" }],
                        },
                        {
                          title: "ScriptCredential",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "bytes" }],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "Pointer",
                  dataType: "constructor",
                  index: 1,
                  fields: [
                    { dataType: "integer", title: "slotNumber" },
                    {
                      dataType: "integer",
                      title: "transactionIndex",
                    },
                    { dataType: "integer", title: "certificateIndex" },
                  ],
                },
              ],
            },
            { dataType: "bytes", title: "delegatee" },
          ],
        },
        {
          title: "PoolRegistration",
          dataType: "constructor",
          index: 3,
          fields: [
            { dataType: "bytes", title: "poolId" },
            {
              dataType: "bytes",
              title: "vrf",
            },
          ],
        },
        {
          title: "PoolDeregistration",
          dataType: "constructor",
          index: 4,
          fields: [
            { dataType: "bytes", title: "poolId" },
            {
              dataType: "integer",
              title: "epoch",
            },
          ],
        },
        {
          title: "Governance",
          dataType: "constructor",
          index: 5,
          fields: [],
        },
        {
          title: "TreasuryMovement",
          dataType: "constructor",
          index: 6,
          fields: [],
        },
      ],
    },
  },
) as unknown as XCertificate;

export interface XCredential {
  new (): Validator;
  _: { VerificationKeyCredential: [string] } | { ScriptCredential: [string] };
}

export const XCredential = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Credential",
      description:
        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKeyCredential",
          dataType: "constructor",
          index: 0,
          fields: [{ dataType: "bytes" }],
        },
        {
          title: "ScriptCredential",
          dataType: "constructor",
          index: 1,
          fields: [{ dataType: "bytes" }],
        },
      ],
    },
  },
) as unknown as XCredential;

export interface XDatum {
  new (): Validator;
  _: "NoDatum" | { DatumHash: [string] } | { InlineDatum: [Data] };
}

export const XDatum = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Datum",
      description: "An output `Datum`.",
      anyOf: [
        {
          title: "NoDatum",
          dataType: "constructor",
          index: 0,
          fields: [],
        },
        {
          title: "DatumHash",
          description: "A datum referenced by its hash digest.",
          dataType: "constructor",
          index: 1,
          fields: [{ dataType: "bytes" }],
        },
        {
          title: "InlineDatum",
          description: "A datum completely inlined in the output.",
          dataType: "constructor",
          index: 2,
          fields: [{ description: "Any Plutus data." }],
        },
      ],
    },
  },
) as unknown as XDatum;

export interface XInput {
  new (): Validator;
  _: {
    outputReference: { transactionId: { hash: string }; outputIndex: bigint };
    output: {
      address: {
        paymentCredential:
          | { VerificationKeyCredential: [string] }
          | {
              ScriptCredential: [string];
            };
        stakeCredential:
          | {
              Inline: [
                | { VerificationKeyCredential: [string] }
                | {
                    ScriptCredential: [string];
                  },
              ];
            }
          | {
              Pointer: {
                slotNumber: bigint;
                transactionIndex: bigint;
                certificateIndex: bigint;
              };
            }
          | null;
      };
      value: Map<string, Map<string, bigint>>;
      datum: "NoDatum" | { DatumHash: [string] } | { InlineDatum: [Data] };
      referenceScript: string | null;
    };
  };
}

export const XInput = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Input",
      description:
        "An `Input` made of an output reference and, the resolved value associated with that output.",
      anyOf: [
        {
          title: "Input",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "outputReference",
              description:
                "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
              anyOf: [
                {
                  title: "OutputReference",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "transactionId",
                      description:
                        "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                      anyOf: [
                        {
                          title: "TransactionId",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes", title: "hash" }],
                        },
                      ],
                    },
                    { dataType: "integer", title: "outputIndex" },
                  ],
                },
              ],
            },
            {
              title: "output",
              description:
                "A transaction `Output`, with an address, a value and optional datums and script references.",
              anyOf: [
                {
                  title: "Output",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "address",
                      description:
                        "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
                      anyOf: [
                        {
                          title: "Address",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              title: "paymentCredential",
                              description:
                                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                              anyOf: [
                                {
                                  title: "VerificationKeyCredential",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [{ dataType: "bytes" }],
                                },
                                {
                                  title: "ScriptCredential",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "bytes" }],
                                },
                              ],
                            },
                            {
                              title: "stakeCredential",
                              anyOf: [
                                {
                                  title: "Some",
                                  description: "An optional value.",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    {
                                      description:
                                        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                      anyOf: [
                                        {
                                          title: "Inline",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [
                                            {
                                              description:
                                                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                              anyOf: [
                                                {
                                                  title:
                                                    "VerificationKeyCredential",
                                                  dataType: "constructor",
                                                  index: 0,
                                                  fields: [
                                                    { dataType: "bytes" },
                                                  ],
                                                },
                                                {
                                                  title: "ScriptCredential",
                                                  dataType: "constructor",
                                                  index: 1,
                                                  fields: [
                                                    { dataType: "bytes" },
                                                  ],
                                                },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          title: "Pointer",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [
                                            {
                                              dataType: "integer",
                                              title: "slotNumber",
                                            },
                                            {
                                              dataType: "integer",
                                              title: "transactionIndex",
                                            },
                                            {
                                              dataType: "integer",
                                              title: "certificateIndex",
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  title: "None",
                                  description: "Nothing.",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      title: "value",
                      description:
                        "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                      dataType: "map",
                      keys: { dataType: "bytes" },
                      values: {
                        title: "Dict",
                        description:
                          "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                        dataType: "map",
                        keys: { dataType: "bytes" },
                        values: { dataType: "integer" },
                      },
                    },
                    {
                      title: "datum",
                      description: "An output `Datum`.",
                      anyOf: [
                        {
                          title: "NoDatum",
                          dataType: "constructor",
                          index: 0,
                          fields: [],
                        },
                        {
                          title: "DatumHash",
                          description: "A datum referenced by its hash digest.",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "bytes" }],
                        },
                        {
                          title: "InlineDatum",
                          description:
                            "A datum completely inlined in the output.",
                          dataType: "constructor",
                          index: 2,
                          fields: [{ description: "Any Plutus data." }],
                        },
                      ],
                    },
                    {
                      title: "referenceScript",
                      anyOf: [
                        {
                          title: "Some",
                          description: "An optional value.",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes" }],
                        },
                        {
                          title: "None",
                          description: "Nothing.",
                          dataType: "constructor",
                          index: 1,
                          fields: [],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  },
) as unknown as XInput;

export interface XInteger {
  new (): Validator;
  _: bigint;
}

export const XInteger = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { dataType: "integer" } },
) as unknown as XInteger;

export interface XMintedValue {
  new (): Validator;
  _: Map<string, Map<string, bigint>>;
}

export const XMintedValue = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "MintedValue",
      description:
        "A multi-asset value that can be found when minting transaction. It always holds\n a null quantity of _Ada_. Note that because of historical reasons, this is slightly\n different from `Value` found in transaction outputs.\n\n Note that you're never expected to construct a `MintedValue` yourself. If you need to\n manipulate multi-asset values, use [Value](#Value)\n\n See also [`from_minted_value`](#from_minted_value).",
      dataType: "map",
      keys: { dataType: "bytes" },
      values: {
        title: "Dict",
        description:
          "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
        dataType: "map",
        keys: { dataType: "bytes" },
        values: { dataType: "integer" },
      },
    },
  },
) as unknown as XMintedValue;

export interface XOutput {
  new (): Validator;
  _: {
    address: {
      paymentCredential:
        | { VerificationKeyCredential: [string] }
        | {
            ScriptCredential: [string];
          };
      stakeCredential:
        | {
            Inline: [
              | { VerificationKeyCredential: [string] }
              | {
                  ScriptCredential: [string];
                },
            ];
          }
        | {
            Pointer: {
              slotNumber: bigint;
              transactionIndex: bigint;
              certificateIndex: bigint;
            };
          }
        | null;
    };
    value: Map<string, Map<string, bigint>>;
    datum: "NoDatum" | { DatumHash: [string] } | { InlineDatum: [Data] };
    referenceScript: string | null;
  };
}

export const XOutput = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Output",
      description:
        "A transaction `Output`, with an address, a value and optional datums and script references.",
      anyOf: [
        {
          title: "Output",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "address",
              description:
                "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
              anyOf: [
                {
                  title: "Address",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "paymentCredential",
                      description:
                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                      anyOf: [
                        {
                          title: "VerificationKeyCredential",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes" }],
                        },
                        {
                          title: "ScriptCredential",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "bytes" }],
                        },
                      ],
                    },
                    {
                      title: "stakeCredential",
                      anyOf: [
                        {
                          title: "Some",
                          description: "An optional value.",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              description:
                                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                              anyOf: [
                                {
                                  title: "Inline",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    {
                                      description:
                                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                      anyOf: [
                                        {
                                          title: "VerificationKeyCredential",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                        {
                                          title: "ScriptCredential",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  title: "Pointer",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [
                                    {
                                      dataType: "integer",
                                      title: "slotNumber",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "transactionIndex",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "certificateIndex",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "None",
                          description: "Nothing.",
                          dataType: "constructor",
                          index: 1,
                          fields: [],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              title: "value",
              description:
                "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
              dataType: "map",
              keys: { dataType: "bytes" },
              values: {
                title: "Dict",
                description:
                  "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                dataType: "map",
                keys: { dataType: "bytes" },
                values: { dataType: "integer" },
              },
            },
            {
              title: "datum",
              description: "An output `Datum`.",
              anyOf: [
                {
                  title: "NoDatum",
                  dataType: "constructor",
                  index: 0,
                  fields: [],
                },
                {
                  title: "DatumHash",
                  description: "A datum referenced by its hash digest.",
                  dataType: "constructor",
                  index: 1,
                  fields: [{ dataType: "bytes" }],
                },
                {
                  title: "InlineDatum",
                  description: "A datum completely inlined in the output.",
                  dataType: "constructor",
                  index: 2,
                  fields: [{ description: "Any Plutus data." }],
                },
              ],
            },
            {
              title: "referenceScript",
              anyOf: [
                {
                  title: "Some",
                  description: "An optional value.",
                  dataType: "constructor",
                  index: 0,
                  fields: [{ dataType: "bytes" }],
                },
                {
                  title: "None",
                  description: "Nothing.",
                  dataType: "constructor",
                  index: 1,
                  fields: [],
                },
              ],
            },
          ],
        },
      ],
    },
  },
) as unknown as XOutput;

export interface XOutputReference {
  new (): Validator;
  _: { transactionId: { hash: string }; outputIndex: bigint };
}

export const XOutputReference = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "OutputReference",
      description:
        "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
      anyOf: [
        {
          title: "OutputReference",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "transactionId",
              description:
                "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
              anyOf: [
                {
                  title: "TransactionId",
                  dataType: "constructor",
                  index: 0,
                  fields: [{ dataType: "bytes", title: "hash" }],
                },
              ],
            },
            { dataType: "integer", title: "outputIndex" },
          ],
        },
      ],
    },
  },
) as unknown as XOutputReference;

export interface XPaymentCredential {
  new (): Validator;
  _: { VerificationKeyCredential: [string] } | { ScriptCredential: [string] };
}

export const XPaymentCredential = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Credential",
      description:
        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      anyOf: [
        {
          title: "VerificationKeyCredential",
          dataType: "constructor",
          index: 0,
          fields: [{ dataType: "bytes" }],
        },
        {
          title: "ScriptCredential",
          dataType: "constructor",
          index: 1,
          fields: [{ dataType: "bytes" }],
        },
      ],
    },
  },
) as unknown as XPaymentCredential;

export interface XPolicyId {
  new (): Validator;
  _: string;
}

export const XPolicyId = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { dataType: "bytes" } },
) as unknown as XPolicyId;

export interface XPoolId {
  new (): Validator;
  _: string;
}

export const XPoolId = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { dataType: "bytes" } },
) as unknown as XPoolId;

export interface XRedeemer {
  new (): Validator;
  _: Data;
}

export const XRedeemer = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { title: "Data", description: "Any Plutus data." } },
) as unknown as XRedeemer;

export interface XReferenced {
  new (): Validator;
  _:
    | {
        Inline: [
          | { VerificationKeyCredential: [string] }
          | { ScriptCredential: [string] },
        ];
      }
    | {
        Pointer: {
          slotNumber: bigint;
          transactionIndex: bigint;
          certificateIndex: bigint;
        };
      };
}

export const XReferenced = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Referenced",
      description:
        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              description:
                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
              anyOf: [
                {
                  title: "VerificationKeyCredential",
                  dataType: "constructor",
                  index: 0,
                  fields: [{ dataType: "bytes" }],
                },
                {
                  title: "ScriptCredential",
                  dataType: "constructor",
                  index: 1,
                  fields: [{ dataType: "bytes" }],
                },
              ],
            },
          ],
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            { dataType: "integer", title: "slotNumber" },
            {
              dataType: "integer",
              title: "transactionIndex",
            },
            { dataType: "integer", title: "certificateIndex" },
          ],
        },
      ],
    },
  },
) as unknown as XReferenced;

export interface XScript {
  new (): Validator;
  _: string;
}

export const XScript = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { dataType: "bytes" } },
) as unknown as XScript;

export interface XScriptContext {
  new (): Validator;
  _: {
    transaction: {
      inputs: Array<{
        outputReference: {
          transactionId: { hash: string };
          outputIndex: bigint;
        };
        output: {
          address: {
            paymentCredential:
              | { VerificationKeyCredential: [string] }
              | {
                  ScriptCredential: [string];
                };
            stakeCredential:
              | {
                  Inline: [
                    | { VerificationKeyCredential: [string] }
                    | {
                        ScriptCredential: [string];
                      },
                  ];
                }
              | {
                  Pointer: {
                    slotNumber: bigint;
                    transactionIndex: bigint;
                    certificateIndex: bigint;
                  };
                }
              | null;
          };
          value: Map<string, Map<string, bigint>>;
          datum:
            | "NoDatum"
            | { DatumHash: [string] }
            | {
                InlineDatum: [Data];
              };
          referenceScript: string | null;
        };
      }>;
      referenceInputs: Array<{
        outputReference: {
          transactionId: { hash: string };
          outputIndex: bigint;
        };
        output: {
          address: {
            paymentCredential:
              | { VerificationKeyCredential: [string] }
              | {
                  ScriptCredential: [string];
                };
            stakeCredential:
              | {
                  Inline: [
                    | { VerificationKeyCredential: [string] }
                    | {
                        ScriptCredential: [string];
                      },
                  ];
                }
              | {
                  Pointer: {
                    slotNumber: bigint;
                    transactionIndex: bigint;
                    certificateIndex: bigint;
                  };
                }
              | null;
          };
          value: Map<string, Map<string, bigint>>;
          datum:
            | "NoDatum"
            | { DatumHash: [string] }
            | {
                InlineDatum: [Data];
              };
          referenceScript: string | null;
        };
      }>;
      outputs: Array<{
        address: {
          paymentCredential:
            | { VerificationKeyCredential: [string] }
            | {
                ScriptCredential: [string];
              };
          stakeCredential:
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              }
            | null;
        };
        value: Map<string, Map<string, bigint>>;
        datum: "NoDatum" | { DatumHash: [string] } | { InlineDatum: [Data] };
        referenceScript: string | null;
      }>;
      fee: Map<string, Map<string, bigint>>;
      mint: Map<string, Map<string, bigint>>;
      certificates: Array<
        | {
            CredentialRegistration: {
              delegator:
                | {
                    Inline: [
                      | { VerificationKeyCredential: [string] }
                      | {
                          ScriptCredential: [string];
                        },
                    ];
                  }
                | {
                    Pointer: {
                      slotNumber: bigint;
                      transactionIndex: bigint;
                      certificateIndex: bigint;
                    };
                  };
            };
          }
        | {
            CredentialDeregistration: {
              delegator:
                | {
                    Inline: [
                      | { VerificationKeyCredential: [string] }
                      | {
                          ScriptCredential: [string];
                        },
                    ];
                  }
                | {
                    Pointer: {
                      slotNumber: bigint;
                      transactionIndex: bigint;
                      certificateIndex: bigint;
                    };
                  };
            };
          }
        | {
            CredentialDelegation: {
              delegator:
                | {
                    Inline: [
                      | { VerificationKeyCredential: [string] }
                      | {
                          ScriptCredential: [string];
                        },
                    ];
                  }
                | {
                    Pointer: {
                      slotNumber: bigint;
                      transactionIndex: bigint;
                      certificateIndex: bigint;
                    };
                  };
              delegatee: string;
            };
          }
        | { PoolRegistration: { poolId: string; vrf: string } }
        | { PoolDeregistration: { poolId: string; epoch: bigint } }
        | "Governance"
        | "TreasuryMovement"
      >;
      withdrawals: Map<
        | {
            Inline: [
              | { VerificationKeyCredential: [string] }
              | {
                  ScriptCredential: [string];
                },
            ];
          }
        | {
            Pointer: {
              slotNumber: bigint;
              transactionIndex: bigint;
              certificateIndex: bigint;
            };
          },
        bigint
      >;
      validityRange: {
        lowerBound: {
          boundType:
            | "NegativeInfinity"
            | { Finite: [bigint] }
            | "PositiveInfinity";
          isInclusive: boolean;
        };
        upperBound: {
          boundType:
            | "NegativeInfinity"
            | { Finite: [bigint] }
            | "PositiveInfinity";
          isInclusive: boolean;
        };
      };
      extraSignatories: Array<string>;
      redeemers: Map<
        | { Mint: [string] }
        | {
            Spend: [{ transactionId: { hash: string }; outputIndex: bigint }];
          }
        | {
            WithdrawFrom: [
              | {
                  Inline: [
                    | { VerificationKeyCredential: [string] }
                    | {
                        ScriptCredential: [string];
                      },
                  ];
                }
              | {
                  Pointer: {
                    slotNumber: bigint;
                    transactionIndex: bigint;
                    certificateIndex: bigint;
                  };
                },
            ];
          }
        | {
            Publish: [
              | {
                  CredentialRegistration: {
                    delegator:
                      | {
                          Inline: [
                            | { VerificationKeyCredential: [string] }
                            | {
                                ScriptCredential: [string];
                              },
                          ];
                        }
                      | {
                          Pointer: {
                            slotNumber: bigint;
                            transactionIndex: bigint;
                            certificateIndex: bigint;
                          };
                        };
                  };
                }
              | {
                  CredentialDeregistration: {
                    delegator:
                      | {
                          Inline: [
                            | { VerificationKeyCredential: [string] }
                            | {
                                ScriptCredential: [string];
                              },
                          ];
                        }
                      | {
                          Pointer: {
                            slotNumber: bigint;
                            transactionIndex: bigint;
                            certificateIndex: bigint;
                          };
                        };
                  };
                }
              | {
                  CredentialDelegation: {
                    delegator:
                      | {
                          Inline: [
                            | { VerificationKeyCredential: [string] }
                            | {
                                ScriptCredential: [string];
                              },
                          ];
                        }
                      | {
                          Pointer: {
                            slotNumber: bigint;
                            transactionIndex: bigint;
                            certificateIndex: bigint;
                          };
                        };
                    delegatee: string;
                  };
                }
              | { PoolRegistration: { poolId: string; vrf: string } }
              | { PoolDeregistration: { poolId: string; epoch: bigint } }
              | "Governance"
              | "TreasuryMovement",
            ];
          },
        Data
      >;
      datums: Map<string, Data>;
      id: { hash: string };
    };
    purpose:
      | { Mint: [string] }
      | {
          Spend: [{ transactionId: { hash: string }; outputIndex: bigint }];
        }
      | {
          WithdrawFrom: [
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              },
          ];
        }
      | {
          Publish: [
            | {
                CredentialRegistration: {
                  delegator:
                    | {
                        Inline: [
                          | { VerificationKeyCredential: [string] }
                          | {
                              ScriptCredential: [string];
                            },
                        ];
                      }
                    | {
                        Pointer: {
                          slotNumber: bigint;
                          transactionIndex: bigint;
                          certificateIndex: bigint;
                        };
                      };
                };
              }
            | {
                CredentialDeregistration: {
                  delegator:
                    | {
                        Inline: [
                          | { VerificationKeyCredential: [string] }
                          | {
                              ScriptCredential: [string];
                            },
                        ];
                      }
                    | {
                        Pointer: {
                          slotNumber: bigint;
                          transactionIndex: bigint;
                          certificateIndex: bigint;
                        };
                      };
                };
              }
            | {
                CredentialDelegation: {
                  delegator:
                    | {
                        Inline: [
                          | { VerificationKeyCredential: [string] }
                          | {
                              ScriptCredential: [string];
                            },
                        ];
                      }
                    | {
                        Pointer: {
                          slotNumber: bigint;
                          transactionIndex: bigint;
                          certificateIndex: bigint;
                        };
                      };
                  delegatee: string;
                };
              }
            | { PoolRegistration: { poolId: string; vrf: string } }
            | { PoolDeregistration: { poolId: string; epoch: bigint } }
            | "Governance"
            | "TreasuryMovement",
          ];
        };
  };
}

export const XScriptContext = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "ScriptContext",
      description:
        "A context given to a script by the Cardano ledger when being executed.\n\n The context contains information about the entire transaction that contains\n the script. The transaction may also contain other scripts; to distinguish\n between multiple scripts, the `ScriptContext` also contains a `purpose`\n which indicates which script (or, for what purpose) of the transaction is\n being executed.",
      anyOf: [
        {
          title: "ScriptContext",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "transaction",
              description:
                "A Cardano `Transaction`, as seen by Plutus scripts.\n\n Note that this is a representation of a transaction, and not the 1:1\n translation of the transaction as seen by the ledger. In particular,\n Plutus scripts can't see inputs locked by bootstrap addresses, outputs\n to bootstrap addresses or just transaction metadata.",
              anyOf: [
                {
                  title: "Transaction",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      dataType: "list",
                      items: {
                        title: "Input",
                        description:
                          "An `Input` made of an output reference and, the resolved value associated with that output.",
                        anyOf: [
                          {
                            title: "Input",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "outputReference",
                                description:
                                  "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
                                anyOf: [
                                  {
                                    title: "OutputReference",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "transactionId",
                                        description:
                                          "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                                        anyOf: [
                                          {
                                            title: "TransactionId",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                dataType: "bytes",
                                                title: "hash",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        dataType: "integer",
                                        title: "outputIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "output",
                                description:
                                  "A transaction `Output`, with an address, a value and optional datums and script references.",
                                anyOf: [
                                  {
                                    title: "Output",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "address",
                                        description:
                                          "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
                                        anyOf: [
                                          {
                                            title: "Address",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                title: "paymentCredential",
                                                description:
                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                anyOf: [
                                                  {
                                                    title:
                                                      "VerificationKeyCredential",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                  {
                                                    title: "ScriptCredential",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                ],
                                              },
                                              {
                                                title: "stakeCredential",
                                                anyOf: [
                                                  {
                                                    title: "Some",
                                                    description:
                                                      "An optional value.",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      {
                                                        description:
                                                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                                        anyOf: [
                                                          {
                                                            title: "Inline",
                                                            dataType:
                                                              "constructor",
                                                            index: 0,
                                                            fields: [
                                                              {
                                                                description:
                                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                                anyOf: [
                                                                  {
                                                                    title:
                                                                      "VerificationKeyCredential",
                                                                    dataType:
                                                                      "constructor",
                                                                    index: 0,
                                                                    fields: [
                                                                      {
                                                                        dataType:
                                                                          "bytes",
                                                                      },
                                                                    ],
                                                                  },
                                                                  {
                                                                    title:
                                                                      "ScriptCredential",
                                                                    dataType:
                                                                      "constructor",
                                                                    index: 1,
                                                                    fields: [
                                                                      {
                                                                        dataType:
                                                                          "bytes",
                                                                      },
                                                                    ],
                                                                  },
                                                                ],
                                                              },
                                                            ],
                                                          },
                                                          {
                                                            title: "Pointer",
                                                            dataType:
                                                              "constructor",
                                                            index: 1,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "integer",
                                                                title:
                                                                  "slotNumber",
                                                              },
                                                              {
                                                                dataType:
                                                                  "integer",
                                                                title:
                                                                  "transactionIndex",
                                                              },
                                                              {
                                                                dataType:
                                                                  "integer",
                                                                title:
                                                                  "certificateIndex",
                                                              },
                                                            ],
                                                          },
                                                        ],
                                                      },
                                                    ],
                                                  },
                                                  {
                                                    title: "None",
                                                    description: "Nothing.",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        title: "value",
                                        description:
                                          "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                                        dataType: "map",
                                        keys: { dataType: "bytes" },
                                        values: {
                                          title: "Dict",
                                          description:
                                            "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                                          dataType: "map",
                                          keys: { dataType: "bytes" },
                                          values: { dataType: "integer" },
                                        },
                                      },
                                      {
                                        title: "datum",
                                        description: "An output `Datum`.",
                                        anyOf: [
                                          {
                                            title: "NoDatum",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [],
                                          },
                                          {
                                            title: "DatumHash",
                                            description:
                                              "A datum referenced by its hash digest.",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "InlineDatum",
                                            description:
                                              "A datum completely inlined in the output.",
                                            dataType: "constructor",
                                            index: 2,
                                            fields: [
                                              {
                                                description: "Any Plutus data.",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        title: "referenceScript",
                                        anyOf: [
                                          {
                                            title: "Some",
                                            description: "An optional value.",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "None",
                                            description: "Nothing.",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      title: "inputs",
                    },
                    {
                      dataType: "list",
                      items: {
                        title: "Input",
                        description:
                          "An `Input` made of an output reference and, the resolved value associated with that output.",
                        anyOf: [
                          {
                            title: "Input",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "outputReference",
                                description:
                                  "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
                                anyOf: [
                                  {
                                    title: "OutputReference",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "transactionId",
                                        description:
                                          "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                                        anyOf: [
                                          {
                                            title: "TransactionId",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                dataType: "bytes",
                                                title: "hash",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        dataType: "integer",
                                        title: "outputIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "output",
                                description:
                                  "A transaction `Output`, with an address, a value and optional datums and script references.",
                                anyOf: [
                                  {
                                    title: "Output",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "address",
                                        description:
                                          "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
                                        anyOf: [
                                          {
                                            title: "Address",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                title: "paymentCredential",
                                                description:
                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                anyOf: [
                                                  {
                                                    title:
                                                      "VerificationKeyCredential",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                  {
                                                    title: "ScriptCredential",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                ],
                                              },
                                              {
                                                title: "stakeCredential",
                                                anyOf: [
                                                  {
                                                    title: "Some",
                                                    description:
                                                      "An optional value.",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      {
                                                        description:
                                                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                                        anyOf: [
                                                          {
                                                            title: "Inline",
                                                            dataType:
                                                              "constructor",
                                                            index: 0,
                                                            fields: [
                                                              {
                                                                description:
                                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                                anyOf: [
                                                                  {
                                                                    title:
                                                                      "VerificationKeyCredential",
                                                                    dataType:
                                                                      "constructor",
                                                                    index: 0,
                                                                    fields: [
                                                                      {
                                                                        dataType:
                                                                          "bytes",
                                                                      },
                                                                    ],
                                                                  },
                                                                  {
                                                                    title:
                                                                      "ScriptCredential",
                                                                    dataType:
                                                                      "constructor",
                                                                    index: 1,
                                                                    fields: [
                                                                      {
                                                                        dataType:
                                                                          "bytes",
                                                                      },
                                                                    ],
                                                                  },
                                                                ],
                                                              },
                                                            ],
                                                          },
                                                          {
                                                            title: "Pointer",
                                                            dataType:
                                                              "constructor",
                                                            index: 1,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "integer",
                                                                title:
                                                                  "slotNumber",
                                                              },
                                                              {
                                                                dataType:
                                                                  "integer",
                                                                title:
                                                                  "transactionIndex",
                                                              },
                                                              {
                                                                dataType:
                                                                  "integer",
                                                                title:
                                                                  "certificateIndex",
                                                              },
                                                            ],
                                                          },
                                                        ],
                                                      },
                                                    ],
                                                  },
                                                  {
                                                    title: "None",
                                                    description: "Nothing.",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        title: "value",
                                        description:
                                          "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                                        dataType: "map",
                                        keys: { dataType: "bytes" },
                                        values: {
                                          title: "Dict",
                                          description:
                                            "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                                          dataType: "map",
                                          keys: { dataType: "bytes" },
                                          values: { dataType: "integer" },
                                        },
                                      },
                                      {
                                        title: "datum",
                                        description: "An output `Datum`.",
                                        anyOf: [
                                          {
                                            title: "NoDatum",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [],
                                          },
                                          {
                                            title: "DatumHash",
                                            description:
                                              "A datum referenced by its hash digest.",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "InlineDatum",
                                            description:
                                              "A datum completely inlined in the output.",
                                            dataType: "constructor",
                                            index: 2,
                                            fields: [
                                              {
                                                description: "Any Plutus data.",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        title: "referenceScript",
                                        anyOf: [
                                          {
                                            title: "Some",
                                            description: "An optional value.",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "None",
                                            description: "Nothing.",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      title: "referenceInputs",
                    },
                    {
                      dataType: "list",
                      items: {
                        title: "Output",
                        description:
                          "A transaction `Output`, with an address, a value and optional datums and script references.",
                        anyOf: [
                          {
                            title: "Output",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "address",
                                description:
                                  "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
                                anyOf: [
                                  {
                                    title: "Address",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "paymentCredential",
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                      {
                                        title: "stakeCredential",
                                        anyOf: [
                                          {
                                            title: "Some",
                                            description: "An optional value.",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                description:
                                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                                anyOf: [
                                                  {
                                                    title: "Inline",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      {
                                                        description:
                                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                        anyOf: [
                                                          {
                                                            title:
                                                              "VerificationKeyCredential",
                                                            dataType:
                                                              "constructor",
                                                            index: 0,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "bytes",
                                                              },
                                                            ],
                                                          },
                                                          {
                                                            title:
                                                              "ScriptCredential",
                                                            dataType:
                                                              "constructor",
                                                            index: 1,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "bytes",
                                                              },
                                                            ],
                                                          },
                                                        ],
                                                      },
                                                    ],
                                                  },
                                                  {
                                                    title: "Pointer",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      {
                                                        dataType: "integer",
                                                        title: "slotNumber",
                                                      },
                                                      {
                                                        dataType: "integer",
                                                        title:
                                                          "transactionIndex",
                                                      },
                                                      {
                                                        dataType: "integer",
                                                        title:
                                                          "certificateIndex",
                                                      },
                                                    ],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            title: "None",
                                            description: "Nothing.",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "value",
                                description:
                                  "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                                dataType: "map",
                                keys: { dataType: "bytes" },
                                values: {
                                  title: "Dict",
                                  description:
                                    "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                                  dataType: "map",
                                  keys: { dataType: "bytes" },
                                  values: { dataType: "integer" },
                                },
                              },
                              {
                                title: "datum",
                                description: "An output `Datum`.",
                                anyOf: [
                                  {
                                    title: "NoDatum",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [],
                                  },
                                  {
                                    title: "DatumHash",
                                    description:
                                      "A datum referenced by its hash digest.",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "InlineDatum",
                                    description:
                                      "A datum completely inlined in the output.",
                                    dataType: "constructor",
                                    index: 2,
                                    fields: [
                                      { description: "Any Plutus data." },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "referenceScript",
                                anyOf: [
                                  {
                                    title: "Some",
                                    description: "An optional value.",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "None",
                                    description: "Nothing.",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      title: "outputs",
                    },
                    {
                      title: "fee",
                      description:
                        "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                      dataType: "map",
                      keys: { dataType: "bytes" },
                      values: {
                        title: "Dict",
                        description:
                          "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                        dataType: "map",
                        keys: { dataType: "bytes" },
                        values: { dataType: "integer" },
                      },
                    },
                    {
                      title: "mint",
                      description:
                        "A multi-asset value that can be found when minting transaction. It always holds\n a null quantity of _Ada_. Note that because of historical reasons, this is slightly\n different from `Value` found in transaction outputs.\n\n Note that you're never expected to construct a `MintedValue` yourself. If you need to\n manipulate multi-asset values, use [Value](#Value)\n\n See also [`from_minted_value`](#from_minted_value).",
                      dataType: "map",
                      keys: { dataType: "bytes" },
                      values: {
                        title: "Dict",
                        description:
                          "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                        dataType: "map",
                        keys: { dataType: "bytes" },
                        values: { dataType: "integer" },
                      },
                    },
                    {
                      dataType: "list",
                      items: {
                        title: "Certificate",
                        description:
                          "An on-chain certificate attesting of some operation. Publishing\n certificates / triggers different kind of rules; most of the time,\n they require signatures from / specific keys.",
                        anyOf: [
                          {
                            title: "CredentialRegistration",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "delegator",
                                description:
                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                anyOf: [
                                  {
                                    title: "Inline",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "Pointer",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        dataType: "integer",
                                        title: "slotNumber",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "transactionIndex",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "certificateIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "CredentialDeregistration",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              {
                                title: "delegator",
                                description:
                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                anyOf: [
                                  {
                                    title: "Inline",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "Pointer",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        dataType: "integer",
                                        title: "slotNumber",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "transactionIndex",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "certificateIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "CredentialDelegation",
                            dataType: "constructor",
                            index: 2,
                            fields: [
                              {
                                title: "delegator",
                                description:
                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                anyOf: [
                                  {
                                    title: "Inline",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "Pointer",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        dataType: "integer",
                                        title: "slotNumber",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "transactionIndex",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "certificateIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                              { dataType: "bytes", title: "delegatee" },
                            ],
                          },
                          {
                            title: "PoolRegistration",
                            dataType: "constructor",
                            index: 3,
                            fields: [
                              { dataType: "bytes", title: "poolId" },
                              {
                                dataType: "bytes",
                                title: "vrf",
                              },
                            ],
                          },
                          {
                            title: "PoolDeregistration",
                            dataType: "constructor",
                            index: 4,
                            fields: [
                              { dataType: "bytes", title: "poolId" },
                              {
                                dataType: "integer",
                                title: "epoch",
                              },
                            ],
                          },
                          {
                            title: "Governance",
                            dataType: "constructor",
                            index: 5,
                            fields: [],
                          },
                          {
                            title: "TreasuryMovement",
                            dataType: "constructor",
                            index: 6,
                            fields: [],
                          },
                        ],
                      },
                      title: "certificates",
                    },
                    {
                      title: "withdrawals",
                      description:
                        "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                      dataType: "map",
                      keys: {
                        title: "Referenced",
                        description:
                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                        anyOf: [
                          {
                            title: "Inline",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                description:
                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                anyOf: [
                                  {
                                    title: "VerificationKeyCredential",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "ScriptCredential",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "Pointer",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              { dataType: "integer", title: "slotNumber" },
                              {
                                dataType: "integer",
                                title: "transactionIndex",
                              },
                              {
                                dataType: "integer",
                                title: "certificateIndex",
                              },
                            ],
                          },
                        ],
                      },
                      values: { dataType: "integer" },
                    },
                    {
                      title: "validityRange",
                      description:
                        "A type to represent intervals of values. Interval are inhabited by a type\n `a` which is useful for non-infinite intervals that have a finite\n lower-bound and/or upper-bound.\n\n This allows to represent all kind of mathematical intervals:\n\n ```aiken\n // [1; 10]\n let i0: Interval<PosixTime> = Interval\n   { lower_bound:\n       IntervalBound { bound_type: Finite(1), is_inclusive: True }\n   , upper_bound:\n       IntervalBound { bound_type: Finite(10), is_inclusive: True }\n   }\n ```\n\n ```aiken\n // (20; infinity)\n let i1: Interval<PosixTime> = Interval\n   { lower_bound:\n       IntervalBound { bound_type: Finite(20), is_inclusive: False }\n   , upper_bound:\n       IntervalBound { bound_type: PositiveInfinity, is_inclusive: False }\n   }\n ```",
                      anyOf: [
                        {
                          title: "Interval",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              title: "lowerBound",
                              description:
                                "An interval bound, either inclusive or exclusive.",
                              anyOf: [
                                {
                                  title: "IntervalBound",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    {
                                      title: "boundType",
                                      description:
                                        "A type of interval bound. Where finite, a value of type `a` must be\n provided. `a` will typically be an `Int`, representing a number of seconds or\n milliseconds.",
                                      anyOf: [
                                        {
                                          title: "NegativeInfinity",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [],
                                        },
                                        {
                                          title: "Finite",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [{ dataType: "integer" }],
                                        },
                                        {
                                          title: "PositiveInfinity",
                                          dataType: "constructor",
                                          index: 2,
                                          fields: [],
                                        },
                                      ],
                                    },
                                    {
                                      title: "isInclusive",
                                      anyOf: [
                                        {
                                          title: "False",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [],
                                        },
                                        {
                                          title: "True",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              title: "upperBound",
                              description:
                                "An interval bound, either inclusive or exclusive.",
                              anyOf: [
                                {
                                  title: "IntervalBound",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    {
                                      title: "boundType",
                                      description:
                                        "A type of interval bound. Where finite, a value of type `a` must be\n provided. `a` will typically be an `Int`, representing a number of seconds or\n milliseconds.",
                                      anyOf: [
                                        {
                                          title: "NegativeInfinity",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [],
                                        },
                                        {
                                          title: "Finite",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [{ dataType: "integer" }],
                                        },
                                        {
                                          title: "PositiveInfinity",
                                          dataType: "constructor",
                                          index: 2,
                                          fields: [],
                                        },
                                      ],
                                    },
                                    {
                                      title: "isInclusive",
                                      anyOf: [
                                        {
                                          title: "False",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [],
                                        },
                                        {
                                          title: "True",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      dataType: "list",
                      items: { dataType: "bytes" },
                      title: "extraSignatories",
                    },
                    {
                      title: "redeemers",
                      description:
                        "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                      dataType: "map",
                      keys: {
                        title: "ScriptPurpose",
                        description:
                          "Characterizes the kind of script being executed.",
                        anyOf: [
                          {
                            title: "Mint",
                            description:
                              "For scripts executed as minting/burning policies, to insert\n or remove assets from circulation. It's parameterized by the identifier\n of the associated policy.",
                            dataType: "constructor",
                            index: 0,
                            fields: [{ dataType: "bytes" }],
                          },
                          {
                            title: "Spend",
                            description:
                              "For scripts that are used as payment credentials for addresses in\n transaction outputs. They govern the rule by which the output they\n reference can be spent.",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              {
                                description:
                                  "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
                                anyOf: [
                                  {
                                    title: "OutputReference",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "transactionId",
                                        description:
                                          "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                                        anyOf: [
                                          {
                                            title: "TransactionId",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                dataType: "bytes",
                                                title: "hash",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      {
                                        dataType: "integer",
                                        title: "outputIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "WithdrawFrom",
                            description:
                              "For scripts that validate reward withdrawals from a reward account.\n\n The argument identifies the target reward account.",
                            dataType: "constructor",
                            index: 2,
                            fields: [
                              {
                                description:
                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                anyOf: [
                                  {
                                    title: "Inline",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "Pointer",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        dataType: "integer",
                                        title: "slotNumber",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "transactionIndex",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "certificateIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "Publish",
                            description:
                              "Needed when delegating to a pool using stake credentials defined as a\n Plutus script. This purpose is also triggered when de-registering such\n stake credentials.\n\n It embeds the certificate that's being validated.",
                            dataType: "constructor",
                            index: 3,
                            fields: [
                              {
                                description:
                                  "An on-chain certificate attesting of some operation. Publishing\n certificates / triggers different kind of rules; most of the time,\n they require signatures from / specific keys.",
                                anyOf: [
                                  {
                                    title: "CredentialRegistration",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "delegator",
                                        description:
                                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                        anyOf: [
                                          {
                                            title: "Inline",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                description:
                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                anyOf: [
                                                  {
                                                    title:
                                                      "VerificationKeyCredential",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                  {
                                                    title: "ScriptCredential",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            title: "Pointer",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [
                                              {
                                                dataType: "integer",
                                                title: "slotNumber",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "transactionIndex",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "certificateIndex",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "CredentialDeregistration",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        title: "delegator",
                                        description:
                                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                        anyOf: [
                                          {
                                            title: "Inline",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                description:
                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                anyOf: [
                                                  {
                                                    title:
                                                      "VerificationKeyCredential",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                  {
                                                    title: "ScriptCredential",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            title: "Pointer",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [
                                              {
                                                dataType: "integer",
                                                title: "slotNumber",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "transactionIndex",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "certificateIndex",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "CredentialDelegation",
                                    dataType: "constructor",
                                    index: 2,
                                    fields: [
                                      {
                                        title: "delegator",
                                        description:
                                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                        anyOf: [
                                          {
                                            title: "Inline",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                description:
                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                anyOf: [
                                                  {
                                                    title:
                                                      "VerificationKeyCredential",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                  {
                                                    title: "ScriptCredential",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            title: "Pointer",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [
                                              {
                                                dataType: "integer",
                                                title: "slotNumber",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "transactionIndex",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "certificateIndex",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                      { dataType: "bytes", title: "delegatee" },
                                    ],
                                  },
                                  {
                                    title: "PoolRegistration",
                                    dataType: "constructor",
                                    index: 3,
                                    fields: [
                                      { dataType: "bytes", title: "poolId" },
                                      {
                                        dataType: "bytes",
                                        title: "vrf",
                                      },
                                    ],
                                  },
                                  {
                                    title: "PoolDeregistration",
                                    dataType: "constructor",
                                    index: 4,
                                    fields: [
                                      { dataType: "bytes", title: "poolId" },
                                      {
                                        dataType: "integer",
                                        title: "epoch",
                                      },
                                    ],
                                  },
                                  {
                                    title: "Governance",
                                    dataType: "constructor",
                                    index: 5,
                                    fields: [],
                                  },
                                  {
                                    title: "TreasuryMovement",
                                    dataType: "constructor",
                                    index: 6,
                                    fields: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      values: {
                        title: "Data",
                        description: "Any Plutus data.",
                      },
                    },
                    {
                      title: "datums",
                      description:
                        "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                      dataType: "map",
                      keys: { dataType: "bytes" },
                      values: {
                        title: "Data",
                        description: "Any Plutus data.",
                      },
                    },
                    {
                      title: "id",
                      description:
                        "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                      anyOf: [
                        {
                          title: "TransactionId",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes", title: "hash" }],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              title: "purpose",
              description: "Characterizes the kind of script being executed.",
              anyOf: [
                {
                  title: "Mint",
                  description:
                    "For scripts executed as minting/burning policies, to insert\n or remove assets from circulation. It's parameterized by the identifier\n of the associated policy.",
                  dataType: "constructor",
                  index: 0,
                  fields: [{ dataType: "bytes" }],
                },
                {
                  title: "Spend",
                  description:
                    "For scripts that are used as payment credentials for addresses in\n transaction outputs. They govern the rule by which the output they\n reference can be spent.",
                  dataType: "constructor",
                  index: 1,
                  fields: [
                    {
                      description:
                        "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
                      anyOf: [
                        {
                          title: "OutputReference",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              title: "transactionId",
                              description:
                                "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                              anyOf: [
                                {
                                  title: "TransactionId",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    { dataType: "bytes", title: "hash" },
                                  ],
                                },
                              ],
                            },
                            { dataType: "integer", title: "outputIndex" },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "WithdrawFrom",
                  description:
                    "For scripts that validate reward withdrawals from a reward account.\n\n The argument identifies the target reward account.",
                  dataType: "constructor",
                  index: 2,
                  fields: [
                    {
                      description:
                        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                      anyOf: [
                        {
                          title: "Inline",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              description:
                                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                              anyOf: [
                                {
                                  title: "VerificationKeyCredential",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [{ dataType: "bytes" }],
                                },
                                {
                                  title: "ScriptCredential",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "bytes" }],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "Pointer",
                          dataType: "constructor",
                          index: 1,
                          fields: [
                            { dataType: "integer", title: "slotNumber" },
                            {
                              dataType: "integer",
                              title: "transactionIndex",
                            },
                            { dataType: "integer", title: "certificateIndex" },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "Publish",
                  description:
                    "Needed when delegating to a pool using stake credentials defined as a\n Plutus script. This purpose is also triggered when de-registering such\n stake credentials.\n\n It embeds the certificate that's being validated.",
                  dataType: "constructor",
                  index: 3,
                  fields: [
                    {
                      description:
                        "An on-chain certificate attesting of some operation. Publishing\n certificates / triggers different kind of rules; most of the time,\n they require signatures from / specific keys.",
                      anyOf: [
                        {
                          title: "CredentialRegistration",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              title: "delegator",
                              description:
                                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                              anyOf: [
                                {
                                  title: "Inline",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    {
                                      description:
                                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                      anyOf: [
                                        {
                                          title: "VerificationKeyCredential",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                        {
                                          title: "ScriptCredential",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  title: "Pointer",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [
                                    {
                                      dataType: "integer",
                                      title: "slotNumber",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "transactionIndex",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "certificateIndex",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "CredentialDeregistration",
                          dataType: "constructor",
                          index: 1,
                          fields: [
                            {
                              title: "delegator",
                              description:
                                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                              anyOf: [
                                {
                                  title: "Inline",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    {
                                      description:
                                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                      anyOf: [
                                        {
                                          title: "VerificationKeyCredential",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                        {
                                          title: "ScriptCredential",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  title: "Pointer",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [
                                    {
                                      dataType: "integer",
                                      title: "slotNumber",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "transactionIndex",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "certificateIndex",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "CredentialDelegation",
                          dataType: "constructor",
                          index: 2,
                          fields: [
                            {
                              title: "delegator",
                              description:
                                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                              anyOf: [
                                {
                                  title: "Inline",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [
                                    {
                                      description:
                                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                      anyOf: [
                                        {
                                          title: "VerificationKeyCredential",
                                          dataType: "constructor",
                                          index: 0,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                        {
                                          title: "ScriptCredential",
                                          dataType: "constructor",
                                          index: 1,
                                          fields: [{ dataType: "bytes" }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  title: "Pointer",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [
                                    {
                                      dataType: "integer",
                                      title: "slotNumber",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "transactionIndex",
                                    },
                                    {
                                      dataType: "integer",
                                      title: "certificateIndex",
                                    },
                                  ],
                                },
                              ],
                            },
                            { dataType: "bytes", title: "delegatee" },
                          ],
                        },
                        {
                          title: "PoolRegistration",
                          dataType: "constructor",
                          index: 3,
                          fields: [
                            { dataType: "bytes", title: "poolId" },
                            {
                              dataType: "bytes",
                              title: "vrf",
                            },
                          ],
                        },
                        {
                          title: "PoolDeregistration",
                          dataType: "constructor",
                          index: 4,
                          fields: [
                            { dataType: "bytes", title: "poolId" },
                            {
                              dataType: "integer",
                              title: "epoch",
                            },
                          ],
                        },
                        {
                          title: "Governance",
                          dataType: "constructor",
                          index: 5,
                          fields: [],
                        },
                        {
                          title: "TreasuryMovement",
                          dataType: "constructor",
                          index: 6,
                          fields: [],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  },
) as unknown as XScriptContext;

export interface XScriptPurpose {
  new (): Validator;
  _:
    | { Mint: [string] }
    | {
        Spend: [{ transactionId: { hash: string }; outputIndex: bigint }];
      }
    | {
        WithdrawFrom: [
          | {
              Inline: [
                | { VerificationKeyCredential: [string] }
                | {
                    ScriptCredential: [string];
                  },
              ];
            }
          | {
              Pointer: {
                slotNumber: bigint;
                transactionIndex: bigint;
                certificateIndex: bigint;
              };
            },
        ];
      }
    | {
        Publish: [
          | {
              CredentialRegistration: {
                delegator:
                  | {
                      Inline: [
                        | { VerificationKeyCredential: [string] }
                        | {
                            ScriptCredential: [string];
                          },
                      ];
                    }
                  | {
                      Pointer: {
                        slotNumber: bigint;
                        transactionIndex: bigint;
                        certificateIndex: bigint;
                      };
                    };
              };
            }
          | {
              CredentialDeregistration: {
                delegator:
                  | {
                      Inline: [
                        | { VerificationKeyCredential: [string] }
                        | {
                            ScriptCredential: [string];
                          },
                      ];
                    }
                  | {
                      Pointer: {
                        slotNumber: bigint;
                        transactionIndex: bigint;
                        certificateIndex: bigint;
                      };
                    };
              };
            }
          | {
              CredentialDelegation: {
                delegator:
                  | {
                      Inline: [
                        | { VerificationKeyCredential: [string] }
                        | {
                            ScriptCredential: [string];
                          },
                      ];
                    }
                  | {
                      Pointer: {
                        slotNumber: bigint;
                        transactionIndex: bigint;
                        certificateIndex: bigint;
                      };
                    };
                delegatee: string;
              };
            }
          | { PoolRegistration: { poolId: string; vrf: string } }
          | { PoolDeregistration: { poolId: string; epoch: bigint } }
          | "Governance"
          | "TreasuryMovement",
        ];
      };
}

export const XScriptPurpose = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "ScriptPurpose",
      description: "Characterizes the kind of script being executed.",
      anyOf: [
        {
          title: "Mint",
          description:
            "For scripts executed as minting/burning policies, to insert\n or remove assets from circulation. It's parameterized by the identifier\n of the associated policy.",
          dataType: "constructor",
          index: 0,
          fields: [{ dataType: "bytes" }],
        },
        {
          title: "Spend",
          description:
            "For scripts that are used as payment credentials for addresses in\n transaction outputs. They govern the rule by which the output they\n reference can be spent.",
          dataType: "constructor",
          index: 1,
          fields: [
            {
              description:
                "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
              anyOf: [
                {
                  title: "OutputReference",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "transactionId",
                      description:
                        "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                      anyOf: [
                        {
                          title: "TransactionId",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes", title: "hash" }],
                        },
                      ],
                    },
                    { dataType: "integer", title: "outputIndex" },
                  ],
                },
              ],
            },
          ],
        },
        {
          title: "WithdrawFrom",
          description:
            "For scripts that validate reward withdrawals from a reward account.\n\n The argument identifies the target reward account.",
          dataType: "constructor",
          index: 2,
          fields: [
            {
              description:
                "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
              anyOf: [
                {
                  title: "Inline",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      description:
                        "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                      anyOf: [
                        {
                          title: "VerificationKeyCredential",
                          dataType: "constructor",
                          index: 0,
                          fields: [{ dataType: "bytes" }],
                        },
                        {
                          title: "ScriptCredential",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "bytes" }],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "Pointer",
                  dataType: "constructor",
                  index: 1,
                  fields: [
                    { dataType: "integer", title: "slotNumber" },
                    {
                      dataType: "integer",
                      title: "transactionIndex",
                    },
                    { dataType: "integer", title: "certificateIndex" },
                  ],
                },
              ],
            },
          ],
        },
        {
          title: "Publish",
          description:
            "Needed when delegating to a pool using stake credentials defined as a\n Plutus script. This purpose is also triggered when de-registering such\n stake credentials.\n\n It embeds the certificate that's being validated.",
          dataType: "constructor",
          index: 3,
          fields: [
            {
              description:
                "An on-chain certificate attesting of some operation. Publishing\n certificates / triggers different kind of rules; most of the time,\n they require signatures from / specific keys.",
              anyOf: [
                {
                  title: "CredentialRegistration",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "delegator",
                      description:
                        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                      anyOf: [
                        {
                          title: "Inline",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              description:
                                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                              anyOf: [
                                {
                                  title: "VerificationKeyCredential",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [{ dataType: "bytes" }],
                                },
                                {
                                  title: "ScriptCredential",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "bytes" }],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "Pointer",
                          dataType: "constructor",
                          index: 1,
                          fields: [
                            { dataType: "integer", title: "slotNumber" },
                            {
                              dataType: "integer",
                              title: "transactionIndex",
                            },
                            { dataType: "integer", title: "certificateIndex" },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "CredentialDeregistration",
                  dataType: "constructor",
                  index: 1,
                  fields: [
                    {
                      title: "delegator",
                      description:
                        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                      anyOf: [
                        {
                          title: "Inline",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              description:
                                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                              anyOf: [
                                {
                                  title: "VerificationKeyCredential",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [{ dataType: "bytes" }],
                                },
                                {
                                  title: "ScriptCredential",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "bytes" }],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "Pointer",
                          dataType: "constructor",
                          index: 1,
                          fields: [
                            { dataType: "integer", title: "slotNumber" },
                            {
                              dataType: "integer",
                              title: "transactionIndex",
                            },
                            { dataType: "integer", title: "certificateIndex" },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  title: "CredentialDelegation",
                  dataType: "constructor",
                  index: 2,
                  fields: [
                    {
                      title: "delegator",
                      description:
                        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                      anyOf: [
                        {
                          title: "Inline",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              description:
                                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                              anyOf: [
                                {
                                  title: "VerificationKeyCredential",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [{ dataType: "bytes" }],
                                },
                                {
                                  title: "ScriptCredential",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "bytes" }],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          title: "Pointer",
                          dataType: "constructor",
                          index: 1,
                          fields: [
                            { dataType: "integer", title: "slotNumber" },
                            {
                              dataType: "integer",
                              title: "transactionIndex",
                            },
                            { dataType: "integer", title: "certificateIndex" },
                          ],
                        },
                      ],
                    },
                    { dataType: "bytes", title: "delegatee" },
                  ],
                },
                {
                  title: "PoolRegistration",
                  dataType: "constructor",
                  index: 3,
                  fields: [
                    { dataType: "bytes", title: "poolId" },
                    {
                      dataType: "bytes",
                      title: "vrf",
                    },
                  ],
                },
                {
                  title: "PoolDeregistration",
                  dataType: "constructor",
                  index: 4,
                  fields: [
                    { dataType: "bytes", title: "poolId" },
                    {
                      dataType: "integer",
                      title: "epoch",
                    },
                  ],
                },
                {
                  title: "Governance",
                  dataType: "constructor",
                  index: 5,
                  fields: [],
                },
                {
                  title: "TreasuryMovement",
                  dataType: "constructor",
                  index: 6,
                  fields: [],
                },
              ],
            },
          ],
        },
      ],
    },
  },
) as unknown as XScriptPurpose;

export interface XSignature {
  new (): Validator;
  _: string;
}

export const XSignature = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { dataType: "bytes" } },
) as unknown as XSignature;

export interface XStakeCredential {
  new (): Validator;
  _:
    | {
        Inline: [
          | { VerificationKeyCredential: [string] }
          | { ScriptCredential: [string] },
        ];
      }
    | {
        Pointer: {
          slotNumber: bigint;
          transactionIndex: bigint;
          certificateIndex: bigint;
        };
      };
}

export const XStakeCredential = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Referenced",
      description:
        "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      anyOf: [
        {
          title: "Inline",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              description:
                "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
              anyOf: [
                {
                  title: "VerificationKeyCredential",
                  dataType: "constructor",
                  index: 0,
                  fields: [{ dataType: "bytes" }],
                },
                {
                  title: "ScriptCredential",
                  dataType: "constructor",
                  index: 1,
                  fields: [{ dataType: "bytes" }],
                },
              ],
            },
          ],
        },
        {
          title: "Pointer",
          dataType: "constructor",
          index: 1,
          fields: [
            { dataType: "integer", title: "slotNumber" },
            {
              dataType: "integer",
              title: "transactionIndex",
            },
            { dataType: "integer", title: "certificateIndex" },
          ],
        },
      ],
    },
  },
) as unknown as XStakeCredential;

export interface XTransaction {
  new (): Validator;
  _: {
    inputs: Array<{
      outputReference: {
        transactionId: { hash: string };
        outputIndex: bigint;
      };
      output: {
        address: {
          paymentCredential:
            | { VerificationKeyCredential: [string] }
            | {
                ScriptCredential: [string];
              };
          stakeCredential:
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              }
            | null;
        };
        value: Map<string, Map<string, bigint>>;
        datum: "NoDatum" | { DatumHash: [string] } | { InlineDatum: [Data] };
        referenceScript: string | null;
      };
    }>;
    referenceInputs: Array<{
      outputReference: {
        transactionId: { hash: string };
        outputIndex: bigint;
      };
      output: {
        address: {
          paymentCredential:
            | { VerificationKeyCredential: [string] }
            | {
                ScriptCredential: [string];
              };
          stakeCredential:
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              }
            | null;
        };
        value: Map<string, Map<string, bigint>>;
        datum: "NoDatum" | { DatumHash: [string] } | { InlineDatum: [Data] };
        referenceScript: string | null;
      };
    }>;
    outputs: Array<{
      address: {
        paymentCredential:
          | { VerificationKeyCredential: [string] }
          | {
              ScriptCredential: [string];
            };
        stakeCredential:
          | {
              Inline: [
                | { VerificationKeyCredential: [string] }
                | {
                    ScriptCredential: [string];
                  },
              ];
            }
          | {
              Pointer: {
                slotNumber: bigint;
                transactionIndex: bigint;
                certificateIndex: bigint;
              };
            }
          | null;
      };
      value: Map<string, Map<string, bigint>>;
      datum: "NoDatum" | { DatumHash: [string] } | { InlineDatum: [Data] };
      referenceScript: string | null;
    }>;
    fee: Map<string, Map<string, bigint>>;
    mint: Map<string, Map<string, bigint>>;
    certificates: Array<
      | {
          CredentialRegistration: {
            delegator:
              | {
                  Inline: [
                    | { VerificationKeyCredential: [string] }
                    | {
                        ScriptCredential: [string];
                      },
                  ];
                }
              | {
                  Pointer: {
                    slotNumber: bigint;
                    transactionIndex: bigint;
                    certificateIndex: bigint;
                  };
                };
          };
        }
      | {
          CredentialDeregistration: {
            delegator:
              | {
                  Inline: [
                    | { VerificationKeyCredential: [string] }
                    | {
                        ScriptCredential: [string];
                      },
                  ];
                }
              | {
                  Pointer: {
                    slotNumber: bigint;
                    transactionIndex: bigint;
                    certificateIndex: bigint;
                  };
                };
          };
        }
      | {
          CredentialDelegation: {
            delegator:
              | {
                  Inline: [
                    | { VerificationKeyCredential: [string] }
                    | {
                        ScriptCredential: [string];
                      },
                  ];
                }
              | {
                  Pointer: {
                    slotNumber: bigint;
                    transactionIndex: bigint;
                    certificateIndex: bigint;
                  };
                };
            delegatee: string;
          };
        }
      | { PoolRegistration: { poolId: string; vrf: string } }
      | { PoolDeregistration: { poolId: string; epoch: bigint } }
      | "Governance"
      | "TreasuryMovement"
    >;
    withdrawals: Map<
      | {
          Inline: [
            | { VerificationKeyCredential: [string] }
            | {
                ScriptCredential: [string];
              },
          ];
        }
      | {
          Pointer: {
            slotNumber: bigint;
            transactionIndex: bigint;
            certificateIndex: bigint;
          };
        },
      bigint
    >;
    validityRange: {
      lowerBound: {
        boundType:
          | "NegativeInfinity"
          | { Finite: [bigint] }
          | "PositiveInfinity";
        isInclusive: boolean;
      };
      upperBound: {
        boundType:
          | "NegativeInfinity"
          | { Finite: [bigint] }
          | "PositiveInfinity";
        isInclusive: boolean;
      };
    };
    extraSignatories: Array<string>;
    redeemers: Map<
      | { Mint: [string] }
      | {
          Spend: [{ transactionId: { hash: string }; outputIndex: bigint }];
        }
      | {
          WithdrawFrom: [
            | {
                Inline: [
                  | { VerificationKeyCredential: [string] }
                  | {
                      ScriptCredential: [string];
                    },
                ];
              }
            | {
                Pointer: {
                  slotNumber: bigint;
                  transactionIndex: bigint;
                  certificateIndex: bigint;
                };
              },
          ];
        }
      | {
          Publish: [
            | {
                CredentialRegistration: {
                  delegator:
                    | {
                        Inline: [
                          | { VerificationKeyCredential: [string] }
                          | {
                              ScriptCredential: [string];
                            },
                        ];
                      }
                    | {
                        Pointer: {
                          slotNumber: bigint;
                          transactionIndex: bigint;
                          certificateIndex: bigint;
                        };
                      };
                };
              }
            | {
                CredentialDeregistration: {
                  delegator:
                    | {
                        Inline: [
                          | { VerificationKeyCredential: [string] }
                          | {
                              ScriptCredential: [string];
                            },
                        ];
                      }
                    | {
                        Pointer: {
                          slotNumber: bigint;
                          transactionIndex: bigint;
                          certificateIndex: bigint;
                        };
                      };
                };
              }
            | {
                CredentialDelegation: {
                  delegator:
                    | {
                        Inline: [
                          | { VerificationKeyCredential: [string] }
                          | {
                              ScriptCredential: [string];
                            },
                        ];
                      }
                    | {
                        Pointer: {
                          slotNumber: bigint;
                          transactionIndex: bigint;
                          certificateIndex: bigint;
                        };
                      };
                  delegatee: string;
                };
              }
            | { PoolRegistration: { poolId: string; vrf: string } }
            | { PoolDeregistration: { poolId: string; epoch: bigint } }
            | "Governance"
            | "TreasuryMovement",
          ];
        },
      Data
    >;
    datums: Map<string, Data>;
    id: { hash: string };
  };
}

export const XTransaction = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Transaction",
      description:
        "A Cardano `Transaction`, as seen by Plutus scripts.\n\n Note that this is a representation of a transaction, and not the 1:1\n translation of the transaction as seen by the ledger. In particular,\n Plutus scripts can't see inputs locked by bootstrap addresses, outputs\n to bootstrap addresses or just transaction metadata.",
      anyOf: [
        {
          title: "Transaction",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              dataType: "list",
              items: {
                title: "Input",
                description:
                  "An `Input` made of an output reference and, the resolved value associated with that output.",
                anyOf: [
                  {
                    title: "Input",
                    dataType: "constructor",
                    index: 0,
                    fields: [
                      {
                        title: "outputReference",
                        description:
                          "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
                        anyOf: [
                          {
                            title: "OutputReference",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "transactionId",
                                description:
                                  "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                                anyOf: [
                                  {
                                    title: "TransactionId",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      { dataType: "bytes", title: "hash" },
                                    ],
                                  },
                                ],
                              },
                              { dataType: "integer", title: "outputIndex" },
                            ],
                          },
                        ],
                      },
                      {
                        title: "output",
                        description:
                          "A transaction `Output`, with an address, a value and optional datums and script references.",
                        anyOf: [
                          {
                            title: "Output",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "address",
                                description:
                                  "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
                                anyOf: [
                                  {
                                    title: "Address",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "paymentCredential",
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                      {
                                        title: "stakeCredential",
                                        anyOf: [
                                          {
                                            title: "Some",
                                            description: "An optional value.",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                description:
                                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                                anyOf: [
                                                  {
                                                    title: "Inline",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      {
                                                        description:
                                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                        anyOf: [
                                                          {
                                                            title:
                                                              "VerificationKeyCredential",
                                                            dataType:
                                                              "constructor",
                                                            index: 0,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "bytes",
                                                              },
                                                            ],
                                                          },
                                                          {
                                                            title:
                                                              "ScriptCredential",
                                                            dataType:
                                                              "constructor",
                                                            index: 1,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "bytes",
                                                              },
                                                            ],
                                                          },
                                                        ],
                                                      },
                                                    ],
                                                  },
                                                  {
                                                    title: "Pointer",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      {
                                                        dataType: "integer",
                                                        title: "slotNumber",
                                                      },
                                                      {
                                                        dataType: "integer",
                                                        title:
                                                          "transactionIndex",
                                                      },
                                                      {
                                                        dataType: "integer",
                                                        title:
                                                          "certificateIndex",
                                                      },
                                                    ],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            title: "None",
                                            description: "Nothing.",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "value",
                                description:
                                  "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                                dataType: "map",
                                keys: { dataType: "bytes" },
                                values: {
                                  title: "Dict",
                                  description:
                                    "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                                  dataType: "map",
                                  keys: { dataType: "bytes" },
                                  values: { dataType: "integer" },
                                },
                              },
                              {
                                title: "datum",
                                description: "An output `Datum`.",
                                anyOf: [
                                  {
                                    title: "NoDatum",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [],
                                  },
                                  {
                                    title: "DatumHash",
                                    description:
                                      "A datum referenced by its hash digest.",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "InlineDatum",
                                    description:
                                      "A datum completely inlined in the output.",
                                    dataType: "constructor",
                                    index: 2,
                                    fields: [
                                      { description: "Any Plutus data." },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "referenceScript",
                                anyOf: [
                                  {
                                    title: "Some",
                                    description: "An optional value.",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "None",
                                    description: "Nothing.",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              title: "inputs",
            },
            {
              dataType: "list",
              items: {
                title: "Input",
                description:
                  "An `Input` made of an output reference and, the resolved value associated with that output.",
                anyOf: [
                  {
                    title: "Input",
                    dataType: "constructor",
                    index: 0,
                    fields: [
                      {
                        title: "outputReference",
                        description:
                          "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
                        anyOf: [
                          {
                            title: "OutputReference",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "transactionId",
                                description:
                                  "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                                anyOf: [
                                  {
                                    title: "TransactionId",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      { dataType: "bytes", title: "hash" },
                                    ],
                                  },
                                ],
                              },
                              { dataType: "integer", title: "outputIndex" },
                            ],
                          },
                        ],
                      },
                      {
                        title: "output",
                        description:
                          "A transaction `Output`, with an address, a value and optional datums and script references.",
                        anyOf: [
                          {
                            title: "Output",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "address",
                                description:
                                  "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
                                anyOf: [
                                  {
                                    title: "Address",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        title: "paymentCredential",
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                      {
                                        title: "stakeCredential",
                                        anyOf: [
                                          {
                                            title: "Some",
                                            description: "An optional value.",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                description:
                                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                                anyOf: [
                                                  {
                                                    title: "Inline",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      {
                                                        description:
                                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                        anyOf: [
                                                          {
                                                            title:
                                                              "VerificationKeyCredential",
                                                            dataType:
                                                              "constructor",
                                                            index: 0,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "bytes",
                                                              },
                                                            ],
                                                          },
                                                          {
                                                            title:
                                                              "ScriptCredential",
                                                            dataType:
                                                              "constructor",
                                                            index: 1,
                                                            fields: [
                                                              {
                                                                dataType:
                                                                  "bytes",
                                                              },
                                                            ],
                                                          },
                                                        ],
                                                      },
                                                    ],
                                                  },
                                                  {
                                                    title: "Pointer",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      {
                                                        dataType: "integer",
                                                        title: "slotNumber",
                                                      },
                                                      {
                                                        dataType: "integer",
                                                        title:
                                                          "transactionIndex",
                                                      },
                                                      {
                                                        dataType: "integer",
                                                        title:
                                                          "certificateIndex",
                                                      },
                                                    ],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            title: "None",
                                            description: "Nothing.",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "value",
                                description:
                                  "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                                dataType: "map",
                                keys: { dataType: "bytes" },
                                values: {
                                  title: "Dict",
                                  description:
                                    "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                                  dataType: "map",
                                  keys: { dataType: "bytes" },
                                  values: { dataType: "integer" },
                                },
                              },
                              {
                                title: "datum",
                                description: "An output `Datum`.",
                                anyOf: [
                                  {
                                    title: "NoDatum",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [],
                                  },
                                  {
                                    title: "DatumHash",
                                    description:
                                      "A datum referenced by its hash digest.",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "InlineDatum",
                                    description:
                                      "A datum completely inlined in the output.",
                                    dataType: "constructor",
                                    index: 2,
                                    fields: [
                                      { description: "Any Plutus data." },
                                    ],
                                  },
                                ],
                              },
                              {
                                title: "referenceScript",
                                anyOf: [
                                  {
                                    title: "Some",
                                    description: "An optional value.",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "None",
                                    description: "Nothing.",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              title: "referenceInputs",
            },
            {
              dataType: "list",
              items: {
                title: "Output",
                description:
                  "A transaction `Output`, with an address, a value and optional datums and script references.",
                anyOf: [
                  {
                    title: "Output",
                    dataType: "constructor",
                    index: 0,
                    fields: [
                      {
                        title: "address",
                        description:
                          "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
                        anyOf: [
                          {
                            title: "Address",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "paymentCredential",
                                description:
                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                anyOf: [
                                  {
                                    title: "VerificationKeyCredential",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "ScriptCredential",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                ],
                              },
                              {
                                title: "stakeCredential",
                                anyOf: [
                                  {
                                    title: "Some",
                                    description: "An optional value.",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                        anyOf: [
                                          {
                                            title: "Inline",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [
                                              {
                                                description:
                                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                                anyOf: [
                                                  {
                                                    title:
                                                      "VerificationKeyCredential",
                                                    dataType: "constructor",
                                                    index: 0,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                  {
                                                    title: "ScriptCredential",
                                                    dataType: "constructor",
                                                    index: 1,
                                                    fields: [
                                                      { dataType: "bytes" },
                                                    ],
                                                  },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            title: "Pointer",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [
                                              {
                                                dataType: "integer",
                                                title: "slotNumber",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "transactionIndex",
                                              },
                                              {
                                                dataType: "integer",
                                                title: "certificateIndex",
                                              },
                                            ],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "None",
                                    description: "Nothing.",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                      {
                        title: "value",
                        description:
                          "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
                        dataType: "map",
                        keys: { dataType: "bytes" },
                        values: {
                          title: "Dict",
                          description:
                            "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                          dataType: "map",
                          keys: { dataType: "bytes" },
                          values: { dataType: "integer" },
                        },
                      },
                      {
                        title: "datum",
                        description: "An output `Datum`.",
                        anyOf: [
                          {
                            title: "NoDatum",
                            dataType: "constructor",
                            index: 0,
                            fields: [],
                          },
                          {
                            title: "DatumHash",
                            description:
                              "A datum referenced by its hash digest.",
                            dataType: "constructor",
                            index: 1,
                            fields: [{ dataType: "bytes" }],
                          },
                          {
                            title: "InlineDatum",
                            description:
                              "A datum completely inlined in the output.",
                            dataType: "constructor",
                            index: 2,
                            fields: [{ description: "Any Plutus data." }],
                          },
                        ],
                      },
                      {
                        title: "referenceScript",
                        anyOf: [
                          {
                            title: "Some",
                            description: "An optional value.",
                            dataType: "constructor",
                            index: 0,
                            fields: [{ dataType: "bytes" }],
                          },
                          {
                            title: "None",
                            description: "Nothing.",
                            dataType: "constructor",
                            index: 1,
                            fields: [],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              title: "outputs",
            },
            {
              title: "fee",
              description:
                "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
              dataType: "map",
              keys: { dataType: "bytes" },
              values: {
                title: "Dict",
                description:
                  "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                dataType: "map",
                keys: { dataType: "bytes" },
                values: { dataType: "integer" },
              },
            },
            {
              title: "mint",
              description:
                "A multi-asset value that can be found when minting transaction. It always holds\n a null quantity of _Ada_. Note that because of historical reasons, this is slightly\n different from `Value` found in transaction outputs.\n\n Note that you're never expected to construct a `MintedValue` yourself. If you need to\n manipulate multi-asset values, use [Value](#Value)\n\n See also [`from_minted_value`](#from_minted_value).",
              dataType: "map",
              keys: { dataType: "bytes" },
              values: {
                title: "Dict",
                description:
                  "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
                dataType: "map",
                keys: { dataType: "bytes" },
                values: { dataType: "integer" },
              },
            },
            {
              dataType: "list",
              items: {
                title: "Certificate",
                description:
                  "An on-chain certificate attesting of some operation. Publishing\n certificates / triggers different kind of rules; most of the time,\n they require signatures from / specific keys.",
                anyOf: [
                  {
                    title: "CredentialRegistration",
                    dataType: "constructor",
                    index: 0,
                    fields: [
                      {
                        title: "delegator",
                        description:
                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                        anyOf: [
                          {
                            title: "Inline",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                description:
                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                anyOf: [
                                  {
                                    title: "VerificationKeyCredential",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "ScriptCredential",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "Pointer",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              { dataType: "integer", title: "slotNumber" },
                              {
                                dataType: "integer",
                                title: "transactionIndex",
                              },
                              {
                                dataType: "integer",
                                title: "certificateIndex",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    title: "CredentialDeregistration",
                    dataType: "constructor",
                    index: 1,
                    fields: [
                      {
                        title: "delegator",
                        description:
                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                        anyOf: [
                          {
                            title: "Inline",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                description:
                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                anyOf: [
                                  {
                                    title: "VerificationKeyCredential",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "ScriptCredential",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "Pointer",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              { dataType: "integer", title: "slotNumber" },
                              {
                                dataType: "integer",
                                title: "transactionIndex",
                              },
                              {
                                dataType: "integer",
                                title: "certificateIndex",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    title: "CredentialDelegation",
                    dataType: "constructor",
                    index: 2,
                    fields: [
                      {
                        title: "delegator",
                        description:
                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                        anyOf: [
                          {
                            title: "Inline",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                description:
                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                anyOf: [
                                  {
                                    title: "VerificationKeyCredential",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "ScriptCredential",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "Pointer",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              { dataType: "integer", title: "slotNumber" },
                              {
                                dataType: "integer",
                                title: "transactionIndex",
                              },
                              {
                                dataType: "integer",
                                title: "certificateIndex",
                              },
                            ],
                          },
                        ],
                      },
                      { dataType: "bytes", title: "delegatee" },
                    ],
                  },
                  {
                    title: "PoolRegistration",
                    dataType: "constructor",
                    index: 3,
                    fields: [
                      { dataType: "bytes", title: "poolId" },
                      {
                        dataType: "bytes",
                        title: "vrf",
                      },
                    ],
                  },
                  {
                    title: "PoolDeregistration",
                    dataType: "constructor",
                    index: 4,
                    fields: [
                      { dataType: "bytes", title: "poolId" },
                      {
                        dataType: "integer",
                        title: "epoch",
                      },
                    ],
                  },
                  {
                    title: "Governance",
                    dataType: "constructor",
                    index: 5,
                    fields: [],
                  },
                  {
                    title: "TreasuryMovement",
                    dataType: "constructor",
                    index: 6,
                    fields: [],
                  },
                ],
              },
              title: "certificates",
            },
            {
              title: "withdrawals",
              description:
                "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
              dataType: "map",
              keys: {
                title: "Referenced",
                description:
                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                anyOf: [
                  {
                    title: "Inline",
                    dataType: "constructor",
                    index: 0,
                    fields: [
                      {
                        description:
                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                        anyOf: [
                          {
                            title: "VerificationKeyCredential",
                            dataType: "constructor",
                            index: 0,
                            fields: [{ dataType: "bytes" }],
                          },
                          {
                            title: "ScriptCredential",
                            dataType: "constructor",
                            index: 1,
                            fields: [{ dataType: "bytes" }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    title: "Pointer",
                    dataType: "constructor",
                    index: 1,
                    fields: [
                      { dataType: "integer", title: "slotNumber" },
                      {
                        dataType: "integer",
                        title: "transactionIndex",
                      },
                      { dataType: "integer", title: "certificateIndex" },
                    ],
                  },
                ],
              },
              values: { dataType: "integer" },
            },
            {
              title: "validityRange",
              description:
                "A type to represent intervals of values. Interval are inhabited by a type\n `a` which is useful for non-infinite intervals that have a finite\n lower-bound and/or upper-bound.\n\n This allows to represent all kind of mathematical intervals:\n\n ```aiken\n // [1; 10]\n let i0: Interval<PosixTime> = Interval\n   { lower_bound:\n       IntervalBound { bound_type: Finite(1), is_inclusive: True }\n   , upper_bound:\n       IntervalBound { bound_type: Finite(10), is_inclusive: True }\n   }\n ```\n\n ```aiken\n // (20; infinity)\n let i1: Interval<PosixTime> = Interval\n   { lower_bound:\n       IntervalBound { bound_type: Finite(20), is_inclusive: False }\n   , upper_bound:\n       IntervalBound { bound_type: PositiveInfinity, is_inclusive: False }\n   }\n ```",
              anyOf: [
                {
                  title: "Interval",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "lowerBound",
                      description:
                        "An interval bound, either inclusive or exclusive.",
                      anyOf: [
                        {
                          title: "IntervalBound",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              title: "boundType",
                              description:
                                "A type of interval bound. Where finite, a value of type `a` must be\n provided. `a` will typically be an `Int`, representing a number of seconds or\n milliseconds.",
                              anyOf: [
                                {
                                  title: "NegativeInfinity",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [],
                                },
                                {
                                  title: "Finite",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "integer" }],
                                },
                                {
                                  title: "PositiveInfinity",
                                  dataType: "constructor",
                                  index: 2,
                                  fields: [],
                                },
                              ],
                            },
                            {
                              title: "isInclusive",
                              anyOf: [
                                {
                                  title: "False",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [],
                                },
                                {
                                  title: "True",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      title: "upperBound",
                      description:
                        "An interval bound, either inclusive or exclusive.",
                      anyOf: [
                        {
                          title: "IntervalBound",
                          dataType: "constructor",
                          index: 0,
                          fields: [
                            {
                              title: "boundType",
                              description:
                                "A type of interval bound. Where finite, a value of type `a` must be\n provided. `a` will typically be an `Int`, representing a number of seconds or\n milliseconds.",
                              anyOf: [
                                {
                                  title: "NegativeInfinity",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [],
                                },
                                {
                                  title: "Finite",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [{ dataType: "integer" }],
                                },
                                {
                                  title: "PositiveInfinity",
                                  dataType: "constructor",
                                  index: 2,
                                  fields: [],
                                },
                              ],
                            },
                            {
                              title: "isInclusive",
                              anyOf: [
                                {
                                  title: "False",
                                  dataType: "constructor",
                                  index: 0,
                                  fields: [],
                                },
                                {
                                  title: "True",
                                  dataType: "constructor",
                                  index: 1,
                                  fields: [],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              dataType: "list",
              items: { dataType: "bytes" },
              title: "extraSignatories",
            },
            {
              title: "redeemers",
              description:
                "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
              dataType: "map",
              keys: {
                title: "ScriptPurpose",
                description: "Characterizes the kind of script being executed.",
                anyOf: [
                  {
                    title: "Mint",
                    description:
                      "For scripts executed as minting/burning policies, to insert\n or remove assets from circulation. It's parameterized by the identifier\n of the associated policy.",
                    dataType: "constructor",
                    index: 0,
                    fields: [{ dataType: "bytes" }],
                  },
                  {
                    title: "Spend",
                    description:
                      "For scripts that are used as payment credentials for addresses in\n transaction outputs. They govern the rule by which the output they\n reference can be spent.",
                    dataType: "constructor",
                    index: 1,
                    fields: [
                      {
                        description:
                          "An `OutputReference` is a unique reference to an output on-chain. The `output_index`\n corresponds to the position in the output list of the transaction (identified by its id)\n that produced that output",
                        anyOf: [
                          {
                            title: "OutputReference",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "transactionId",
                                description:
                                  "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
                                anyOf: [
                                  {
                                    title: "TransactionId",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      { dataType: "bytes", title: "hash" },
                                    ],
                                  },
                                ],
                              },
                              { dataType: "integer", title: "outputIndex" },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    title: "WithdrawFrom",
                    description:
                      "For scripts that validate reward withdrawals from a reward account.\n\n The argument identifies the target reward account.",
                    dataType: "constructor",
                    index: 2,
                    fields: [
                      {
                        description:
                          "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                        anyOf: [
                          {
                            title: "Inline",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                description:
                                  "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                anyOf: [
                                  {
                                    title: "VerificationKeyCredential",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                  {
                                    title: "ScriptCredential",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [{ dataType: "bytes" }],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "Pointer",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              { dataType: "integer", title: "slotNumber" },
                              {
                                dataType: "integer",
                                title: "transactionIndex",
                              },
                              {
                                dataType: "integer",
                                title: "certificateIndex",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    title: "Publish",
                    description:
                      "Needed when delegating to a pool using stake credentials defined as a\n Plutus script. This purpose is also triggered when de-registering such\n stake credentials.\n\n It embeds the certificate that's being validated.",
                    dataType: "constructor",
                    index: 3,
                    fields: [
                      {
                        description:
                          "An on-chain certificate attesting of some operation. Publishing\n certificates / triggers different kind of rules; most of the time,\n they require signatures from / specific keys.",
                        anyOf: [
                          {
                            title: "CredentialRegistration",
                            dataType: "constructor",
                            index: 0,
                            fields: [
                              {
                                title: "delegator",
                                description:
                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                anyOf: [
                                  {
                                    title: "Inline",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "Pointer",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        dataType: "integer",
                                        title: "slotNumber",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "transactionIndex",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "certificateIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "CredentialDeregistration",
                            dataType: "constructor",
                            index: 1,
                            fields: [
                              {
                                title: "delegator",
                                description:
                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                anyOf: [
                                  {
                                    title: "Inline",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "Pointer",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        dataType: "integer",
                                        title: "slotNumber",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "transactionIndex",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "certificateIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            title: "CredentialDelegation",
                            dataType: "constructor",
                            index: 2,
                            fields: [
                              {
                                title: "delegator",
                                description:
                                  "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
                                anyOf: [
                                  {
                                    title: "Inline",
                                    dataType: "constructor",
                                    index: 0,
                                    fields: [
                                      {
                                        description:
                                          "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
                                        anyOf: [
                                          {
                                            title: "VerificationKeyCredential",
                                            dataType: "constructor",
                                            index: 0,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                          {
                                            title: "ScriptCredential",
                                            dataType: "constructor",
                                            index: 1,
                                            fields: [{ dataType: "bytes" }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    title: "Pointer",
                                    dataType: "constructor",
                                    index: 1,
                                    fields: [
                                      {
                                        dataType: "integer",
                                        title: "slotNumber",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "transactionIndex",
                                      },
                                      {
                                        dataType: "integer",
                                        title: "certificateIndex",
                                      },
                                    ],
                                  },
                                ],
                              },
                              { dataType: "bytes", title: "delegatee" },
                            ],
                          },
                          {
                            title: "PoolRegistration",
                            dataType: "constructor",
                            index: 3,
                            fields: [
                              { dataType: "bytes", title: "poolId" },
                              {
                                dataType: "bytes",
                                title: "vrf",
                              },
                            ],
                          },
                          {
                            title: "PoolDeregistration",
                            dataType: "constructor",
                            index: 4,
                            fields: [
                              { dataType: "bytes", title: "poolId" },
                              {
                                dataType: "integer",
                                title: "epoch",
                              },
                            ],
                          },
                          {
                            title: "Governance",
                            dataType: "constructor",
                            index: 5,
                            fields: [],
                          },
                          {
                            title: "TreasuryMovement",
                            dataType: "constructor",
                            index: 6,
                            fields: [],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              values: { title: "Data", description: "Any Plutus data." },
            },
            {
              title: "datums",
              description:
                "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
              dataType: "map",
              keys: { dataType: "bytes" },
              values: { title: "Data", description: "Any Plutus data." },
            },
            {
              title: "id",
              description:
                "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
              anyOf: [
                {
                  title: "TransactionId",
                  dataType: "constructor",
                  index: 0,
                  fields: [{ dataType: "bytes", title: "hash" }],
                },
              ],
            },
          ],
        },
      ],
    },
  },
) as unknown as XTransaction;

export interface XTransactionId {
  new (): Validator;
  _: { hash: string };
}

export const XTransactionId = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "TransactionId",
      description:
        "A unique transaction identifier, as the hash of a transaction body. Note that the transaction id\n isn't a direct hash of the `Transaction` as visible on-chain. Rather, they correspond to hash\n digests of transaction body as they are serialized on the network.",
      anyOf: [
        {
          title: "TransactionId",
          dataType: "constructor",
          index: 0,
          fields: [{ dataType: "bytes", title: "hash" }],
        },
      ],
    },
  },
) as unknown as XTransactionId;

export interface XValidityRange {
  new (): Validator;
  _: {
    lowerBound: {
      boundType: "NegativeInfinity" | { Finite: [bigint] } | "PositiveInfinity";
      isInclusive: boolean;
    };
    upperBound: {
      boundType: "NegativeInfinity" | { Finite: [bigint] } | "PositiveInfinity";
      isInclusive: boolean;
    };
  };
}

export const XValidityRange = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Interval",
      description:
        "A type to represent intervals of values. Interval are inhabited by a type\n `a` which is useful for non-infinite intervals that have a finite\n lower-bound and/or upper-bound.\n\n This allows to represent all kind of mathematical intervals:\n\n ```aiken\n // [1; 10]\n let i0: Interval<PosixTime> = Interval\n   { lower_bound:\n       IntervalBound { bound_type: Finite(1), is_inclusive: True }\n   , upper_bound:\n       IntervalBound { bound_type: Finite(10), is_inclusive: True }\n   }\n ```\n\n ```aiken\n // (20; infinity)\n let i1: Interval<PosixTime> = Interval\n   { lower_bound:\n       IntervalBound { bound_type: Finite(20), is_inclusive: False }\n   , upper_bound:\n       IntervalBound { bound_type: PositiveInfinity, is_inclusive: False }\n   }\n ```",
      anyOf: [
        {
          title: "Interval",
          dataType: "constructor",
          index: 0,
          fields: [
            {
              title: "lowerBound",
              description: "An interval bound, either inclusive or exclusive.",
              anyOf: [
                {
                  title: "IntervalBound",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "boundType",
                      description:
                        "A type of interval bound. Where finite, a value of type `a` must be\n provided. `a` will typically be an `Int`, representing a number of seconds or\n milliseconds.",
                      anyOf: [
                        {
                          title: "NegativeInfinity",
                          dataType: "constructor",
                          index: 0,
                          fields: [],
                        },
                        {
                          title: "Finite",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "integer" }],
                        },
                        {
                          title: "PositiveInfinity",
                          dataType: "constructor",
                          index: 2,
                          fields: [],
                        },
                      ],
                    },
                    {
                      title: "isInclusive",
                      anyOf: [
                        {
                          title: "False",
                          dataType: "constructor",
                          index: 0,
                          fields: [],
                        },
                        {
                          title: "True",
                          dataType: "constructor",
                          index: 1,
                          fields: [],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              title: "upperBound",
              description: "An interval bound, either inclusive or exclusive.",
              anyOf: [
                {
                  title: "IntervalBound",
                  dataType: "constructor",
                  index: 0,
                  fields: [
                    {
                      title: "boundType",
                      description:
                        "A type of interval bound. Where finite, a value of type `a` must be\n provided. `a` will typically be an `Int`, representing a number of seconds or\n milliseconds.",
                      anyOf: [
                        {
                          title: "NegativeInfinity",
                          dataType: "constructor",
                          index: 0,
                          fields: [],
                        },
                        {
                          title: "Finite",
                          dataType: "constructor",
                          index: 1,
                          fields: [{ dataType: "integer" }],
                        },
                        {
                          title: "PositiveInfinity",
                          dataType: "constructor",
                          index: 2,
                          fields: [],
                        },
                      ],
                    },
                    {
                      title: "isInclusive",
                      anyOf: [
                        {
                          title: "False",
                          dataType: "constructor",
                          index: 0,
                          fields: [],
                        },
                        {
                          title: "True",
                          dataType: "constructor",
                          index: 1,
                          fields: [],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  },
) as unknown as XValidityRange;

export interface XValue {
  new (): Validator;
  _: Map<string, Map<string, bigint>>;
}

export const XValue = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  {
    _: {
      title: "Value",
      description:
        "A multi-asset output `Value`. Contains tokens indexed by [PolicyId](#PolicyId) and [AssetName](#AssetName).\n\n This type maintain some invariants by construction; in particular, a `Value` will never contain a\n zero quantity of a particular token.",
      dataType: "map",
      keys: { dataType: "bytes" },
      values: {
        title: "Dict",
        description:
          "An opaque `Dict`. The type is opaque because the module maintains some\n invariant, namely: there's only one occurrence of a given key in the dictionary.\n\n Note that the `key` parameter is a phantom-type, and only present as a\n means of documentation. Keys can be any type, yet will need to comparable\n to use functions like `insert`.\n\n See for example:\n\n ```aiken\n pub type Value =\n   Dict<PolicyId, Dict<AssetName, Int>>\n ```",
        dataType: "map",
        keys: { dataType: "bytes" },
        values: { dataType: "integer" },
      },
    },
  },
) as unknown as XValue;

export interface XVerificationKey {
  new (): Validator;
  _: string;
}

export const XVerificationKey = Object.assign(
  function () {
    return { type: "PlutusV2", script: "51010000322253330034a229309b2b2b9a01" };
  },
  { _: { dataType: "bytes" } },
) as unknown as XVerificationKey;
